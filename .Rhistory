print(Sys.time())
posCases = sum(Train1.h[,targetVars[i]])
cat(paste("\n Observations with purchase in Training: ", posCases, "\n"))
# there has to be a minimum amount of obs with purchase for the learning to occur
if (posCases < 1000) {
next                      # disregard tech altogether
}
ModResults <- data.frame(tech = character(0),
prior= numeric(0),
model= character(0),
elapsed=numeric(0),
auc= numeric(0),
lift01 = numeric(0),
lift1 = numeric(0),
endtime= character(0),
params= character(0),
sumExpBook= numeric(0))
# for validation of model results against a reserved data set - create vector with true response
actualV = h2o.assign( Valid.h[, targetVars[i]] , key = "actualV")
# clean up
h2o.rm(h2oServer, grep(pattern = "Last.value", x = h2o.ls(h2oServer)$Key, value = TRUE))
start <- Sys.time()
#clean up from previous model - a subscript error is ok in first pass
try( h2o.rm(h2oServer, GLM@key), silent=T)
cat(paste("\n", start,"Starting a GLM training ...\n"))
parms = "i:1 l:0.00001"
GLM <- h2o.glm(y= targetVars[i],
x= c( Firmo, RFM, Contacts, InterSumm,
FlagsPast, LogBookPast, LogAvgPurch, CtQPurch),
data          = Train1.h,
family        = "binomial",
iter.max      = 1,
lambda        = 5.0E-4,
#lambda        = c(5.0E-4, 1.0E-4, 5.0E-5,  1.0E-5), nfolds=2,
lambda_search = F,
higher_accuracy = T,
standardize   = T,
key = paste0("GLM1_", targetVars[i])
)
# 2 keys created: GLM2Job__* and GLMModel__*
elapsed = paste(round(as.numeric(difftime(Sys.time(), start, units="mins")),2), "mins")
cat("\n ...training GLM for ", targetVars[i], " took ", elapsed, "\n\n")
GLM <- h2o.glm(y= targetVars[i],
x= c( Firmo, RFM, Contacts, InterSumm,
FlagsPast, LogBookPast, LogAvgPurch, CtQPurch),
training_frame          = Train1.h,
family        = "binomial",
iter.max      = 1,
lambda        = 5.0E-4,
#lambda        = c(5.0E-4, 1.0E-4, 5.0E-5,  1.0E-5), nfolds=2,
lambda_search = F,
higher_accuracy = T,
standardize   = T,
destination_key = paste0("GLM1_", targetVars[i])
)
# 2 keys created: GLM2Job__* and GLMModel__*
elapsed = paste(round(as.numeric(difftime(Sys.time(), start, units="mins")),2), "mins")
cat("\n ...training GLM for ", targetVars[i], " took ", elapsed, "\n\n")
GLM <- h2o.glm(y= targetVars[i],
x= c( Firmo, RFM, Contacts, InterSumm,
FlagsPast, LogBookPast, LogAvgPurch, CtQPurch),
training_frame          = Train1.h,
family        = "binomial",
max_iter      = 1,
lambda        = 5.0E-4,
#lambda        = c(5.0E-4, 1.0E-4, 5.0E-5,  1.0E-5), nfolds=2,
lambda_search = F,
higher_accuracy = T,
standardize   = T,
destination_key = paste0("GLM1_", targetVars[i])
)
# 2 keys created: GLM2Job__* and GLMModel__*
elapsed = paste(round(as.numeric(difftime(Sys.time(), start, units="mins")),2), "mins")
cat("\n ...training GLM for ", targetVars[i], " took ", elapsed, "\n\n")
?h2o.glm
GLM <- h2o.glm(y= targetVars[i],
x= c( Firmo, RFM, Contacts, InterSumm,
FlagsPast, LogBookPast, LogAvgPurch, CtQPurch),
training_frame          = Train1.h,
family        = "binomial",
max_iter      = 1,
lambda        = 5.0E-4,
#lambda        = c(5.0E-4, 1.0E-4, 5.0E-5,  1.0E-5), nfolds=2,
lambda_search = F,
standardize   = T,
destination_key = paste0("GLM1_", targetVars[i])
)
# 2 keys created: GLM2Job__* and GLMModel__*
elapsed = paste(round(as.numeric(difftime(Sys.time(), start, units="mins")),2), "mins")
cat("\n ...training GLM for ", targetVars[i], " took ", elapsed, "\n\n")
install.packages("dplyr")
library(dplyr)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
avg_steps_imp <- aggregate(act_data_imp$steps,
list(Interval = act_data_imp$interval,
Day_Type = act_data_imp$Day_Type),
FUN = "mean")
names(avg_steps_imp)[3] <- "Average_Steps"
library(lattice)
xyplot(avg_steps_imp$Average_Steps ~ avg_steps_imp$Interval | avg_steps_imp$Day_Type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
avg_steps_imp <- aggregate(act_data_imp$steps,
list(Interval = act_data_imp$interval,
Day_Type = act_data_imp$Day_Type),
FUN = "mean")
names(avg_steps_imp)[3] <- "Average_Steps"
library(lattice)
xyplot(avg_steps_imp$Average_Steps ~ avg_steps_imp$Interval | avg_steps_imp$Day_Type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
View(act_data_imp)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
##Load the data (i.e. read.csv())
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv")
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$Total_Steps, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
```
mean_total_steps <- mean(total_steps$Total_Steps)
median_total_steps <- median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ][1]
Total_missing <- sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
total_steps_imp <- aggregate(act_data_imp$steps, list(Date = act_data_imp$date), FUN = "sum")
names(total_steps_imp)[2] <- "Total_Steps"
##Histogram
hist(total_steps_imp$Total_Steps, main = paste("Histogram of total number of steps per day for imputed data"), xlab = paste("Total number of steps"))
mean_total_steps_imp <- mean(total_steps_imp$Total_Steps)
median_total_steps_imp <- median(total_steps_imp$Total_Steps)
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
View(act_data_imp)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
##Load the data (i.e. read.csv())
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv")
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$Total_Steps, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean_total_steps <- mean(total_steps$Total_Steps)
median_total_steps <- median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ][1]
Total_missing <- sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
total_steps_imp <- aggregate(act_data_imp$steps, list(Date = act_data_imp$date), FUN = "sum")
names(total_steps_imp)[2] <- "Total_Steps"
##Histogram
hist(total_steps_imp$Total_Steps, main = paste("Histogram of total number of steps per day for imputed data"), xlab = paste("Total number of steps"))
mean_total_steps_imp <- mean(total_steps_imp$Total_Steps)
median_total_steps_imp <- median(total_steps_imp$Total_Steps)
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
avg_steps_imp <- aggregate(act_data_imp$steps,
list(Interval = act_data_imp$interval,
Day_Type = act_data_imp$Day_Type),
FUN = "mean")
names(avg_steps_imp)[3] <- "Average_Steps"
library(lattice)
xyplot(avg_steps_imp$Average_Steps ~ avg_steps_imp$Interval | avg_steps_imp$Day_Type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
##Load the data (i.e. read.csv())
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv")
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
```
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
avg_steps_imp <- aggregate(act_data_imp$steps,
list(Interval = act_data_imp$interval,
Day_Type = act_data_imp$Day_Type),
FUN = "mean")
names(avg_steps_imp)[3] <- "Average_Steps"
library(lattice)
xyplot(avg_steps_imp$Average_Steps ~ avg_steps_imp$Interval | avg_steps_imp$Day_Type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
View(act_data_imp)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
avg_steps_imp <- aggregate(act_data_imp$steps,
list(Interval = act_data_imp$interval,
Day_Type = act_data_imp$Day_Type),
FUN = "mean")
names(avg_steps_imp)[3] <- "Average_Steps"
library(lattice)
xyplot(avg_steps_imp$Average_Steps ~ avg_steps_imp$Interval | avg_steps_imp$Day_Type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
str(act_data_imp)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
##getwd()
unzip("repdata-data-activity.zip")
activity_data <- read.csv("activity.csv",colClasses = c("integer","Date","integer"))
dim(activity_data)
str(activity_data)
#removing records with missing values
act_data_non_miss <- na.omit(activity_data)
rownames(act_data_non_miss) <- 1:nrow(act_data_non_miss)
head(act_data_non_miss)
dim(act_data_non_miss)
str(act_data_non_miss)
total_steps <- aggregate(act_data_non_miss$steps, list(Date = act_data_non_miss$date), FUN = "sum")
names(total_steps)[2] <- "Total_Steps"
hist(total_steps$x, main = paste("Histogram of total number of steps per day"), xlab = paste("Total number of steps"))
mean(total_steps$Total_Steps)
median(total_steps$Total_Steps)
library(ggplot2)
average_steps <- aggregate(act_data_non_miss$steps, list(Interval = act_data_non_miss$interval), FUN = "mean")
names(average_steps)[2] <- "Average_Steps"
ggplot(average_steps, aes(Interval, Average_Steps)) + geom_line(color = "red") + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
max_avg_steps_interval <- average_steps[average_steps$Average_Steps == max(average_steps$Average_Steps), ]
sum(is.na(activity_data))
act_data_imp <- activity_data
for (i in 1:nrow(act_data_imp)) {
if (is.na(act_data_imp$steps[i])) {
act_data_imp$steps[i] <- average_steps[which(act_data_imp$interval[i] == average_steps$Interval), ]$Average_Steps
}
}
head(act_data_imp)
sum(is.na(act_data_imp))
act_data_imp$Day_Name <- as.character(weekdays(act_data_imp$date))
act_data_imp$Day_Type <- ifelse(act_data_imp$Day_Name == "Saturday" | act_data_imp$Day_Name == "Sunday", "Weekend", "Weekday")
avg_steps_imp <- aggregate(act_data_imp$steps,
list(Interval = act_data_imp$interval,
Day_Type = act_data_imp$Day_Type),
FUN = "mean")
names(avg_steps_imp)[3] <- "Average_Steps"
library(lattice)
xyplot(avg_steps_imp$Average_Steps ~ avg_steps_imp$Interval | avg_steps_imp$Day_Type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
str(act_data_imp)
library(knitr)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
knit2html(“PA1.Rmd”)
library(knitr)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
knit2html(“PA1.Rmd”)
library(knitr)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory")
knit2html(“PA1.Rmd”)
cls
clr
clear
library(knitr)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory/Peer_Assessment_1")
knit2html(“PA1.Rmd”)
?knit2html
library(knitr)
setwd("~/Coursera/Data_Science_Specialization/Reproducible_Research/Working_Directory/Peer_Assessment_1")
knit2html("PA1.Rmd")
